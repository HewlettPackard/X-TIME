[tool.poetry]
name = "xtime-training"
# This is a "placeholder" version - do not change. Actual version is set / determined by poetry dynamic versioning
# plugin on the fly. Also see `xtime.__version__` variable in `xtime.__init__`.
version = "0.0.0"
description = ""
authors = ["Hewlett Packard Labs"]
readme = "README.md"
packages = [{include = "xtime"}]
include = ["xtime/_version.py"]     # https://python-poetry.org/docs/pyproject/#include-and-exclude

[tool.poetry.dependencies]
python = ">=3.9,<3.12"      # With `^3.9` dependency resolution fails.
llvmlite = ">0.34.0"        # Without this, in Windows OS poetry selects 0.34 that does not have pre-built packages.
scikit-learn = "1.2.2"      # core dependency
mlflow = "2.2.2"            # core dependency
ray = [                     # core dependency
    { version = "2.3.1", extras = ["tune", "default"], python = "<3.11" },
    { version = "2.9.0", extras = ["tune", "default"], python = ">=3.11" }
]
# Older versions of ray are not compatible with the latest versions of `setuptools`.
# ImportError: cannot import name 'packaging' from 'pkg_resources'.
# https://stackoverflow.com/questions/78604018/importerror-cannot-import-name-packaging-from-pkg-resources-when-trying-to
setuptools = {version = "<70.0", python = "<3.11"}

numpy = [                   # core dependency
    { version = "1.23.5", python = "<3.12" }
]
pandas = "1.5.3"            # core dependency (need to fix the code to work with pandas 2.0.0)
pydantic = "<2"             # indirect dependency (why here: https://github.com/aws/aws-sdk-pandas/issues/2379)
pyaml = "21.10.1"           # core dependency
requests = "2.28.2"         # core dependency
tinydb = "4.7.1"            # core dependency
prettytable = "3.6.0"       # command line interface
coloredlogs = "15.0.1"      # command line interface

# When adding/removing/changing optional dependencies:
#   1. Update README.md file (search for `Extra dependencies`).
#   2. Update `[tool.poetry.extras]` section below.
# Install these dependencies:
#   1. `poetry install --all-extras`  install all extra dependencies.
#   2. `poetry install --extras xgboost`
# If no `--all-extras` / `--extras` provided, the respective installed packages will be uninstalled.
openml = { version = "0.13.1", optional = true }   # Prerequisite dependency for OpenML datasets.
tsfresh = { version = "0.20.2", optional = true }  # Prerequisite dependency for time series data sets.
catboost = [                                       # Gradient boosting trees - CatBoost library.
    { version = "1.1.1", optional = true, python = "<3.11" },
    { version = "1.2.5", optional = true, python = ">=3.11" }
]
lightgbm = { version = "3.3.5", optional = true }  # Gradient boosting trees - LightGBM library.
xgboost = { version = "2.0.3", optional = true }   # Gradient boosting trees - XGBoost library.


[tool.poetry.group.dev.dependencies]
pyre-check = "0.9.22"          # Type checking tool (`pyre --search-path $(python -c 'import site; print(site.getsitepackages()[0])') check`)
ruff = "0.5.0"                 # Replace black, isort, flake with `ruff check [--fix]` and `ruff format`
pytest = "8.2.2"               # Running unit tests (`pytest ./tests` instead of `python -m unittest`)
pytest-xdist = "3.6.1"         # Parallel `pytest` (`python -m pytest -n auto ./tests`)

[tool.poetry.group.eda.dependencies]
jupyter = "1.0.0"
pandasgui = "0.2.14"           # FIXME: This does not work in Jupyter notebooks on Linux headless systems.
PyQt5 = "5.15.2"               # Fixes "inable to find installation candidates for pyqt5-qt5 (x.x.x)" in Ubuntu

[tool.poetry.extras]
openml = ["openml"]
timeseries = ["tsfresh"]

catboost = ["catboost"]
lightgbm = ["lightgbm"]
xgboost = ["xgboost"]

datasets = ["openml", "tsfresh"]
models = ["catboost", "lightgbm", "xgboost"]

all = ["openml", "tsfresh", "catboost", "lightgbm", "xgboost"]


[tool.ruff]
line-length = 120
indent-width = 4
target-version = 'py39'
extend-include = ["*.ipynb"]

[tool.ruff.format]
indent-style = "space"

[tool.ruff.lint]
extend-select = ["I"]  # I - isort

[tool.pytest.ini_options]
markers = [
    "datasets: marks tests as ML datasets unit tests (deselect with '-m \"not datasets\"')",
    "estimators: marks tests as ML models unit tests (deselect with '-m \"not models\"')",
    "cli: marks tests as Command Line Interface (CLI) unit tests (deselect with '-m \"not cli\"')"
]

[tool.poetry-dynamic-versioning]
enable = true
pattern-prefix = "training-"  # Tags should be `training-v0.1.0`, `training-v0.1.0-rc.1` etc.
dirty = true
ignore-untracked = true
style = "semver"

# sergey Is this really needed? When installing, the version info is available via package metadata. During development,
# it can be infferred automaticalyl by looking at git history and project details. This can probably be useful when this
# project is used as is (without installing it) by adjusting python paths?
[tool.poetry-dynamic-versioning.files."xtime/_version.py"]
persistent-substitution = true
initial-content = """
  # These version placeholders will be replaced later during substitution.
  __version__ = "0.0.0"
"""

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"  # This is a thin wrapper around `poetry.core.masonry.api`.
